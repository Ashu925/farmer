<% layout("/layouts/biolerplate") %>

<div class="container mt-4">
    <div class="chat-container">
        <div class="chat-header">
            <h3><%= chat.listing.title %></h3>
            <p class="text-muted">
                Chat with 
                <% chat.participants.forEach(participant => { %>
                    <% if (!participant._id.equals(currentUser._id)) { %>
                        <%= participant.username %>
                    <% } %>
                <% }) %>
            </p>
        </div>

        <div class="messages-container" id="messages">
            <% chat.messages.forEach(message => { %>
                <div class="message <%= message.sender && message.sender._id.equals(currentUser._id) ? 'sent' : 'received' %>">
                    <div class="message-content">
                        <div class="message-header">
                            <strong><%= message.sender ? message.sender.username : 'Unknown User' %></strong>
                            <small class="text-muted">
                                <%= new Date(message.timestamp).toLocaleString() %>
                            </small>
                        </div>
                        <p><%= message.content %></p>
                    </div>
                </div>
            <% }) %>
        </div>

        <div class="message-input">
            <form id="messageForm">
                <div class="input-group">
                    <input type="text" id="messageInput" class="form-control" placeholder="Type your message...">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-paper-plane"></i> Send
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    const chatId = '<%= chat._id %>';
    const userId = '<%= currentUser._id %>';

    // Handle message form submission
    document.getElementById('messageForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const messageInput = document.getElementById('messageInput');
        const content = messageInput.value.trim();
        
        if (!content) return;

        try {
            const response = await fetch(`/chat/${chatId}/message`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ content })
            });

            const data = await response.json();
            
            if (data.success && data.message) {
                // Clear input
                messageInput.value = '';
                
                // Add message to chat
                const messagesContainer = document.getElementById('messages');
                const messageDiv = document.createElement('div');
                const isSent = data.message.sender && data.message.sender._id === userId;
                messageDiv.className = `message ${isSent ? 'sent' : 'received'}`;
                messageDiv.innerHTML = `
                    <div class="message-content">
                        <div class="message-header">
                            <strong>${data.message.sender ? data.message.sender.username : 'Unknown User'}</strong>
                            <small class="text-muted">${new Date(data.message.timestamp).toLocaleString()}</small>
                        </div>
                        <p>${data.message.content}</p>
                    </div>
                `;
                messagesContainer.appendChild(messageDiv);
                
                // Scroll to bottom
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            } else {
                console.error('Failed to send message:', data.error);
                alert('Failed to send message. Please try again.');
            }
        } catch (error) {
            console.error('Error sending message:', error);
            alert('Failed to send message. Please try again.');
        }
    });

    // Socket.io event listeners
    socket.on('connect', () => {
        console.log('Connected to socket server');
        socket.emit('join-chat', chatId);
    });

    socket.on('new-message', (message) => {
        if (message && message.sender && message.sender._id !== userId) {
            const messagesContainer = document.getElementById('messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message received';
            messageDiv.innerHTML = `
                <div class="message-content">
                    <div class="message-header">
                        <strong>${message.sender ? message.sender.username : 'Unknown User'}</strong>
                        <small class="text-muted">${new Date(message.timestamp).toLocaleString()}</small>
                    </div>
                    <p>${message.content}</p>
                </div>
            `;
            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
    });

    // Handle socket errors
    socket.on('error', (error) => {
        console.error('Socket error:', error);
    });

    // Handle connection errors
    socket.on('connect_error', (error) => {
        console.error('Connection error:', error);
    });
</script>

<style>
    .chat-container {
        max-width: 800px;
        margin: 0 auto;
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow: hidden;
    }

    .chat-header {
        padding: 15px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #ddd;
    }

    .messages-container {
        height: 400px;
        overflow-y: auto;
        padding: 15px;
    }

    .message {
        margin-bottom: 15px;
        max-width: 70%;
    }

    .message.sent {
        margin-left: auto;
    }

    .message.received {
        margin-right: auto;
    }

    .message-content {
        padding: 10px 15px;
        border-radius: 15px;
        background-color: #f1f1f1;
    }

    .message.sent .message-content {
        background-color: #007bff;
        color: white;
    }

    .message-header {
        margin-bottom: 5px;
    }

    .message-input {
        padding: 15px;
        background-color: #f8f9fa;
        border-top: 1px solid #ddd;
    }

    .input-group {
        margin-bottom: 0;
    }
</style> 